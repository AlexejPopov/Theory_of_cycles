#include <locale.h>
#include <iostream>

using namespace std;

/* Цикл For (цикл с параметрами) или цикл со встроенным счетчиком.

Это конструкция, которая применяется к циклу, в котором мы знаем точное количество повторений или где мы используем счетчик.
Пишется сперва ключевое слово for, потом круглые скобочки. A в них указываются его параметры, состоящие из трех блоков.

    1-й блок: инициализация счетчика (задание ему начального значения). Затем ставится ";"
    2-й блок: пишется условие работы цикла (блок параметров цикла)
              Условие м/б любым, но лучше его связать со счетчиком, который только что был задан. Условия м/б составными как и у других циклов. Потом снова ставится ";".
    3-й блок: изменение счетчика.

   Принцип работы при входе в цикл:
    1) Сперва выполнится первый блок (задание счетчику начального значения)
    2) Проверка условия
    3) Выполняется тело цикла
    4) Выполняется изменение счетчика
    На дальнейших шагах цикла последовательность будет 2) 3) 4). Первый блок будет выполнен только один раз при входе в цикл.

Логика: создается счетчик, проверяется условие. Если оно истино, выполняются все действия внутри цикла, потом увеличивается счетчик, снова проверяется условие, выполня-
ются действия внутри цикла, потом увеличивается счетчик, снова проверяется условие, выполняются действия,... И когда условие станет ложным, мы выходим из цикла.

(!) Cчетчик, объявленный внутри цикла существует только внутри цикла! (*)

А если нам счетчик i нужен после того как цикл завершен, мы его объявляем до цикла и потом можем использовать внутри цикла, написав i и дав ему нужное значение.
(Операция инкремент может записываться здесь в цикле в обоих вариантах одинаково, i++ и ++i)

Плюсы этого цикла:
 - все параметры содержит в одном месте
 - эти параметры достаточно гибкие для использования и настраивания */

int main()
{
    setlocale(LC_ALL, "rus");
    cout << "---------------------------------------------The program of counting work out exercises!---------------------------------------------------------" << endl;
    /*
    for (int i = 0; i < 15; i++)                                    // можно писать любое изменение, например i+=10, i--, etc.
    {
        cout << "We set down " << i + 1 << " times!" << endl;
    }
    */
    /* Коррекция i+1 на количество повторений в цикле никак не влияет. Это только для пользователя выводится на экран.
    (!) cout << i << endl; после цикла for не будет существовать (*) */


    /*
    int i = 0;                                                      // это уже внешнее i. Объявление счетчика до цикла.
    for (i = 1; i <= 7; ++i)                                        // получаем 7 повторений. Счетчик i влияет на количество итераций внутри цикла.
    {                                                               // другой вариант записи: for (i=0; i<7; i++), а потом в выводе на экран добавить i+1
        cout << "We pulled up " << i << " times!" << endl;          // данный вариант записи дает возможность подтянуться с i без +1, но все-таки самый частый вариант
                                                                    // цикла for от 0 и строго меньше.
    }
    cout << "Counter i= " << i << endl;                             // i будет равна 8 т.к. счетчик введен вне цикла, а в цикле мы его изменили
    */
    /* При значении счетчика i = 8 мы выйдем из цикла. А в цикле выше, из-за нестрогого неравенства, мы выйдем из цикла при i = 15.
    След, то значение счетчика, которое нам нужно при выходе из цикла определяет в том числе как мы цикл напишем.
    Мы можем внутри цикла изменять значение счетчика на то, которое нам нужно, не обязательно на 1. Не нужно для этого инициализировать переменную i.

    Ни один из блоков цикла For не является обязательным для работы цикла. А именно, объявим новый счетчик j до цикла. И если нас текущее значение счетчика j устраи-
    вает, то зачем его менять! След, мы сразу можем прописать условия работы цикла. Но ";" должна не пропускаться все равно! */


    /*
    int j = 0;
    for (; j < 13; j++)
    {
        cout << "We did turning " << j + 1 << " times!" << endl;
    }
    cout << "Counter j= " << j << endl;
    */

    /* Любой блок не является обязательным внутри цикла for. Продолжим подтягиваться.
    Не укажем 1-й и 3-й параметр, а изменение счетчика напишем ниже (как в цикле while). Получится аналогия цикла while.
    (счетчик объявляем до цикла, изменяем его внутри тела цикла, а в скобочках пишем только условие) */


    /*
    int i = 0;
    for (; i <= 15;)                                                // while(i<=15){}
    {
        cout << "We pulled up " << i << " times!" << endl;
        i++;
    }
    */

    /* Вынося счетчик вне цикла, можно использовать его неоднократно. Да, сейчас я написал второй раз int i = 0 т.к. комментирую предыдущие циклы.
    (!) Если не указать вообще ни один блок в параметрах (но ";" должны быть все равно), то мы получим бесконечный цикл */


    /*
    int k = 0;
    for (;;)                                                // словно while(true){} или do{} while(true);
    {
        k++;
        cout << "We jumped up " << k << " times!" << endl;  // счетчик внутри меняется, начальное его значение равно 0, условия нет, след, бесконечно будем прыгать!

        if (k == 252)break;                                 // напишем условие выхода из бесконечного цикла
    }
    */

    /* Вот тут у нас получился аналог цикла do_while - счетчик объявляется до цикла, потом ключевое слово (for), потом действие со счетчиком внутри (нет условия), и в
    конце проверка условия на продолжение итераций (if).

    Цикл for хорош тем, что мы можем его параметры располагать в любом месте цикла, как в заголовке, так и в теле, и вне тела цикла, и тем самым реализовывать работу
    разных циклов.

    do_while с помощью цикла for реализуется как бесконечный цикл с условием выхода.

    Например: */

    float T = 0.0F;
    for (;;)
    {
        cout << "Enter processor temperature: "; cin >> T;
        if (T >= 65)
        {
            cout << "Перегрев процессора! Системный сбой!" << endl;
            break;
        }
    }

    /* Чтобы с помощью цикла for организовать логику работы цикла do_while нужно внутри него прописать условие выхода, а не условие работы. И даже если мы сразу зададим
    температуру 100 градусов, то мы также сперва зайдем в цикл, и если температура меньше чем 65, будем в цикле находиться. А когда станет 65 и больше, выйдем из цикла.

    Какой же цикл лучше использовать для программы с тепрературой процессора? Какой же цикл удобен и где уместен? Все зависит от задачи, которую нужно выполнить.

    Для нашей задачи:
    I. WHILE, у нас будет 2 лишних действия: вывод на экран и ввод первоначальной температуры.

                float T = 0.0F;
                cout << "Enter processor temperature: "; cin >> T;
                while(T<65)
                {
                    cout << "Enter processor temperature: "; cin >> T;
                }
                cout << "Перегрев процессора! Системный сбой!" << endl;


    II. FOR - бесконечный. Бесконечные циклы не приветствуются, цикл должен заканчиваться по своим параметрам. Помимо операции вывода на экран и ввода значения, прове-
    ряется условие. В бесконечном цикле, в котором всегда истина, бесконечно проверяется его условие, снова и снова, а также ниже строчка другого условия в конструкции
    if с break (две дополнительные команды на каждом шаге цикла + постоянная бесконечная проверка, а это больше затрат ресурсов).

                float T = 0.0F;
                for (;;)
                {
                    cout << "Enter processor temperature: "; cin >> T;
                    if (T >= 65)
                    {
                        cout << "Перегрев процессора! Системный сбой!" << endl;
                        break;
                    }
                }


    III. DO_WHILE, тут будет целессообразнее, оптимальнее, быстрее (ничего лишнего, ввели, проверили и вышли). И удобнее, т.к. в do_while мы пишем условия работы цикла
    и это нам ближе и понятнее. Т.е. до тех пор пока Т меньше 65 мы мерием температуру.

                float T = 0.0F;
                do
                {
                    cout << "Enter processor temperature: "; cin >> T;
                } while (T<65);
                cout << "Перегрев процессора! Системный сбой!" << endl;


    А в for мы должны учесть что мы выйдем из цикла когда Т будет больше или равна 65. Забыв написать равно, при 65 градусах цикл продолжит работу, а это для нас может
    уже быть критичной температурой.

    Во многом цикл for заменил собой цикл while, но только в тех случаях, когда мы while используем со счетчиком. Когда мы while со счетчиком не используем, с циклом
    for не всегда удобнее.

    Как же нам определить какой из циклов выбрать для конкретной задачи?

        1. Если у нас есть точное количество повторений, которое мы должны выполнить в цикле, то for лучше всего. Т.к. есть встроенный счетчик, написали цикл по
           классической схеме, отработает как нужно без каких-либо подводных камней.
        2. Если же мы не знаем количество повторений (как долго температура будет подниматься до перегрева), то подойдет либо while либо do_while
        3. Чтобы определиться между while и do_while:
            - если сначала нужно выполнить действие, а затем проверить условие необходимости продолжать эти действия, значит do_while
            - если сначала нужно что-то проверить, условие какое-то и только если оно истина, выполнить, то while

        (!) цикл for лучше всего использовать в связке с оператором continue. */
}